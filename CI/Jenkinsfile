pipeline {
    agent { label "gcp-hodor-slave-generic"}
    options {
       // Add timestamps to output.
       timestamps()
       timeout(time: 10, unit: 'MINUTES')
    }
    environment {
        TEST = "test"
        PR_ID = "pr-${env.CHANGE_ID}"
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:16.20.2'
                    reuseNode true
                }
            }
            environment {
                ANTORA_CACHE_DIR="${WORKSPACE}/.cache"
            }
            steps {
                script {
                    sh label:"Listing current directory", script:
                    """
                        ls -la
                    """
                    sh label:"Install node modules", script:
                    """
                        yarn
                    """
                    sh label:"Generate site", script:
                    """
                        yarn generate
                    """
                    sh label:"Copy artifacts", script:
                    """
                        mkdir ${PR_ID}
                        cp -r ./public_html/* ${PR_ID}
                    """
                    stash includes: "${PR_ID}/**/*", name: 'artifact'
                    deleteDir()
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    def commitMessage = "Adding or updating preview build for PR: ${PR_ID}"
                    checkout scmGit(
                        branches: [[name: 'gh-pages']],
                        userRemoteConfigs: [[
                            credentialsId: 'gh-starknet-docs-pat',
                            url: 'https://github.com/starknet-io/starknet-docs.git'
                        ]]
                    )
                    sh label:"Git config", script:
                    """
                        git config --global --add safe.directory "*"
                        git config --global user.name "Jenkins Automation"
                        git config --global user.email "noreply@github.com"
                        pwd
                        ls -la
                        git remote -v
                        git status
                    """
                    sh label:"Remove PR folder if exist", script:
                    """
                        if [ -d $PR_ID ]
                        then
                            rm -rf $PR_ID
                        fi
                    """
                    unstash 'artifact'
                    // sh label:"Push to branch gh-pages", script:
                    // """
                    //     git status
                    //     git fetch
                    //     git checkout gh-pages
                    //     git add ${PR_ID}

                    //     if ! git diff-index --quiet HEAD --; then
                    //         # Debug information
                    //         echo "Changes detected. Committing and pushing changes."

                    //         # Debug message
                    //         echo "Commit message: ${commitMessage}"
                        
                    //         # Commit changes
                    //         git commit -m "${commitMessage}"

                    //         # Check if commit was successful
                    //         if [ \$? -eq 0 ]; then
                    //         # Debug information
                    //         echo "Commit successful. Pushing changes."
                        
                    //         # Push changes
                    //         git push
                        
                    //         # Check if push was successful
                    //         if [ \$? -eq 0 ]; then
                    //             # Debug information
                    //             echo "Push successful."
                    //         else
                    //             # Debug information
                    //             echo "Error: Push failed."
                    //         fi
                    //         else
                    //         # Debug information
                    //         echo "Error: Commit failed."
                    //         fi
                    //     else
                    //         # Debug information
                    //         echo "No changes found."
                    //     fi
                    // """
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}
