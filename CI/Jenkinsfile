pipeline {
    agent { label "gcp-hodor-slave-generic"}
    options {
       // Add timestamps to output.
       timestamps()
       timeout(time: 10, unit: 'MINUTES')
    }
    environment {
        TEST = "test"
        PR_ID = "pr-${env.CHANGE_ID}"
        GIT_CREDS = credentials('gh-starknet-docs-pat')
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:16.20.2'
                    reuseNode true
                }
            }
            environment {
                ANTORA_CACHE_DIR="${WORKSPACE}/.cache"
            }
            steps {
                script {
                    sh label:"Listing current directory", script:
                    """
                        ls -la
                    """
                    sh label:"Install node modules", script:
                    """
                        yarn
                    """
                    sh label:"Generate site", script:
                    """
                        yarn generate
                    """
                    sh label:"Copy artifacts", script:
                    """
                        mkdir ${PR_ID}
                        cp -r ./public_html/* ${PR_ID}
                    """
                    stash includes: "${PR_ID}/**/*", name: 'artifact'
                    deleteDir()
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    def commitMessage = "Adding or updating preview build for PR: ${PR_ID}"
                    sh label:"Git config", script:
                    """
                        git clone 'https://${GIT_CREDS_PSW}@github.com/starknet-io/starknet-docs.git'
                        git config --global user.name "Jenkins"
                        git config --global user.email "jenkins@noreplay.com"
                    """
                    dir('starknet-docs') {
                        sh label:"Remove PR folder if exist", script:
                        """
                            if [ -d $PR_ID ]
                            then
                                rm -rf $PR_ID
                            fi
                        """
                        unstash 'artifact'
                        sh label:"Push to branch gh-pages", script:
                        """
                            git checkout gh-pages
                            git add ${PR_ID}

                            if ! git diff-index --quiet HEAD --; then
                                # Debug information
                                echo "Changes detected. Committing and pushing changes."

                                # Debug message
                                echo "Commit message: ${commitMessage}"
                            
                                # Commit changes
                                git commit -m "${commitMessage}"

                                # Check if commit was successful
                                if [ \$? -eq 0 ]; then
                                # Debug information
                                echo "Commit successful. Pushing changes."
                            
                                # Push changes
                                git push
                            
                                # Check if push was successful
                                if [ \$? -eq 0 ]; then
                                    # Debug information
                                    echo "Push successful."
                                else
                                    # Debug information
                                    echo "Error: Push failed."
                                fi
                                else
                                # Debug information
                                echo "Error: Commit failed."
                                fi
                            else
                                # Debug information
                                echo "No changes found."
                            fi
                        """
                    }
                    
                }
            }
        }
    }
    post {
        cleanup {
            deleteDir()
        }
    }
}
